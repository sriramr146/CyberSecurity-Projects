import os       # This line imports the 'os' module, which provides functions for interacting with the operating system. It allows us to perform operations such as file and directory manipulation.
import hashlib  # This line imports the 'hashlib' module, which provides cryptographic hash functions. We'll use it to calculate the MD5 hash of files.
import pyfiglet # This line imports the 'pyfiglet' module, which is a Python implementation of the FIGlet tool for creating ASCII art banners and large letters.

# Defining a function to calculate the MD5 hash of a file
def calculate_hash(file_path):                         # This line defines a function named 'calculate_hash' that takes a file path as input. This function will calculate the MD5 hash of the file specified by the file path.
    hasher = hashlib.md5()                             # This line creates an MD5 hash object using the hashlib module.
    with open(file_path, 'rb') as f:                   # This line opens the file specified by 'file_path' in binary read mode ('rb') and assigns it to the variable 'f'. The 'with' statement ensures that the file is properly closed after its suite finishes, even if an exception is raised during the process.
        for chunk in iter(lambda: f.read(4096), b''):  # This line iterates over the file in chunks of 4096 bytes. It repeatedly calls the 'read' method of the file object 'f' until it returns an empty byte string (indicating the end of the file).
            hasher.update(chunk)                       # This line updates the MD5 hash object 'hasher' with the data from the current chunk of the file.
    return hasher.hexdigest()                          # This line returns the hexadecimal representation of the MD5 hash computed by the 'hasher' object.

# Defining a function to scan a file for known malware signatures
def scan_file(file_path):                              # This line defines a function named 'scan_file' that takes a file path as input. This function will scan the specified file for known malware signatures.
    if not os.path.exists(file_path):                  # This line checks if the specified file exists using the 'os.path.exists' function. If the file does not exist, it prints a message indicating that the file was not found.
        print(f"File not found: {file_path}")
        return
    
    try:
        # List of known malware MD5 hashes (for demonstration purposes)
        known_malware_hashes = [                 # This line initializes a list named 'known_malware_hashes' containing MD5 hashes of known malware files. These hashes will be used for comparison during the malware scanning process.
            "e138491838b6ec04ae3813b92e5ba1a9",  
            # We can Add more known malware hashes here
        ]

        file_hash = calculate_hash(file_path)    # This line calculates the MD5 hash of the specified file using the 'calculate_hash' function defined earlier.
        if file_hash in known_malware_hashes:    # This line checks if the calculated MD5 hash of the file is present in the list of known malware hashes. If it is, it prints a message indicating that malware was found. 
            print(f"Found malware: {file_path}")
        else:
            print(f"File is clean: {file_path}")
    except Exception as e:
        print(f"Error scanning file {file_path}: {e}")

# Define a function to scan a directory recursively
def scan_directory(directory):
    for root, _, files in os.walk(directory):   # This line uses the 'os.walk' function to traverse the directory specified by 'directory' recursively. It yields a tuple for each directory visited, containing the directory path, a list of subdirectories, and a list of files.
        for file_name in files:
            file_path = os.path.join(root, file_name)  # This line constructs the full path of each file by joining the directory path ('root') with the filename ('file_name').
            scan_file(file_path)

# Call the function to scan the directory
print(pyfiglet.figlet_format("Malware Scanner"))       # This line prints a stylized banner with the text "Malware Scanner" using the 'pyfiglet.figlet_format' function.
print("<------------------------------------------------------------------>")
directory_to_scan = input("Enter the directory to scan: ")   # This line prompts the user to enter the directory they want to scan and stores the input in the variable 'directory_to_scan'.
scan_directory(directory_to_scan)                      # This line calls the 'scan_directory' function with the directory path provided by the user as an argument, initiating the malware scanning process.
